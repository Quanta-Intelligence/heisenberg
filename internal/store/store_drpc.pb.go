// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: store.proto

package store

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_store_proto struct{}

func (drpcEncoding_File_store_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_store_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_store_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_store_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_store_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCStoreClient interface {
	DRPCConn() drpc.Conn

	Ping(ctx context.Context, in *Empty) (*Pong, error)
	Get(ctx context.Context, in *Empty) (*Empty, error)
}

type drpcStoreClient struct {
	cc drpc.Conn
}

func NewDRPCStoreClient(cc drpc.Conn) DRPCStoreClient {
	return &drpcStoreClient{cc}
}

func (c *drpcStoreClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcStoreClient) Ping(ctx context.Context, in *Empty) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/store.Store/Ping", drpcEncoding_File_store_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcStoreClient) Get(ctx context.Context, in *Empty) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/store.Store/Get", drpcEncoding_File_store_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCStoreServer interface {
	Ping(context.Context, *Empty) (*Pong, error)
	Get(context.Context, *Empty) (*Empty, error)
}

type DRPCStoreUnimplementedServer struct{}

func (s *DRPCStoreUnimplementedServer) Ping(context.Context, *Empty) (*Pong, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCStoreUnimplementedServer) Get(context.Context, *Empty) (*Empty, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCStoreDescription struct{}

func (DRPCStoreDescription) NumMethods() int { return 2 }

func (DRPCStoreDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/store.Store/Ping", drpcEncoding_File_store_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStoreServer).
					Ping(
						ctx,
						in1.(*Empty),
					)
			}, DRPCStoreServer.Ping, true
	case 1:
		return "/store.Store/Get", drpcEncoding_File_store_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCStoreServer).
					Get(
						ctx,
						in1.(*Empty),
					)
			}, DRPCStoreServer.Get, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterStore(mux drpc.Mux, impl DRPCStoreServer) error {
	return mux.Register(impl, DRPCStoreDescription{})
}

type DRPCStore_PingStream interface {
	drpc.Stream
	SendAndClose(*Pong) error
}

type drpcStore_PingStream struct {
	drpc.Stream
}

func (x *drpcStore_PingStream) SendAndClose(m *Pong) error {
	if err := x.MsgSend(m, drpcEncoding_File_store_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCStore_GetStream interface {
	drpc.Stream
	SendAndClose(*Empty) error
}

type drpcStore_GetStream struct {
	drpc.Stream
}

func (x *drpcStore_GetStream) SendAndClose(m *Empty) error {
	if err := x.MsgSend(m, drpcEncoding_File_store_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
